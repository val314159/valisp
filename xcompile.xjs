compile_exprs=@@(tree){
    for(var a=[],v,n=0;v=tree[n],n<tree.length;n++)
	a.push( C(v) );
    return a;
}
length=@@(x){return x.length;}
car=@@(x){return x[0];}
cdr=@@(x){return x.slice(1);}
atom=@@(x){
    if(x===undefined) return true;
    if(x===true) return true;
    if(x===false) return true;
    if(typeof(x)==="string") return true;
    if(typeof(x)==="number") return true;
    if(typeof(x)==="object"&&
       typeof(x.length)==="number") return false;
    return true;
}
var C=compile_expr=@@(expr){
    if(typeof(expr)==="string"&&expr[0]==="s") return str(cdr(expr));
    if(typeof(expr)==="string"&&expr[0]==="y") return cdr(expr);
    if(atom(expr)) return str(expr);
    var head = car(expr);
    var params = cdr(expr);
    var macro = C.M[head];
    if(macro)
      return macro.apply(null,params);
    var args = compile_args(params);
    var func = C.C[head];
    if(func)
      return func.apply(null,args);
    return cdr(head)+"("+args+")";
}
compile_args=@@(a){
    var arr=[];
    for(var n=0;n<a.length;n++)
        push( C(a[n]), arr );
    return arr;
}
C.M={
  "lambda2": function(a,v,b){
  	return("L2"+str[a,v,b]);
  },
};
C.C={
  yif: function(a,b,c){
  	return("("+a+")?"+b+":"+c);
  },
  yfn2: function(args,vars,body){
  	return("function ("+args+"){var "+vars+";\n"+body+"}");
  },
  yprogn: function(x){
  	return("{}");
  },
  yprog1: function(x){
  	return("{}");
  },
  yprog2: function(x){
  	return("{}");
  },
};
